<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0/dist/Chart.min.js"></script>

<h2>Wellness Tracking</h2>
<hr />
<h4>Mood Tracker</h4>
<canvas id="moodChart" width="800" height="400"></canvas>
<br /><br />
<h4>Fitness Tracker</h4>
<canvas id="fitnessChart" width="800" height="400"></canvas>
<br /><br />
<h4>Nutrition Tracker</h4>
<canvas id="nutritionChart" width="800" height="400"></canvas>
<br /><br />

<script>
  function randInt(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
  }

  var moodChartElement = document.getElementById("moodChart").getContext("2d");
  var fitnessChartElement = document
    .getElementById("fitnessChart")
    .getContext("2d");
  var nutritionChartElement = document
    .getElementById("nutritionChart")
    .getContext("2d");
  var labels = [];

  var moodData = [];
  var bgColorsMood = [];
  var borderColorsMood = [];
  var mood = 0;

  var fitnessData = [];
  var bgColorsFitness = [];
  var borderColorsFitness = [];

  var nutritionDataHealthy = [];
  var nutritionDataUnhealthy = [];

  for (i = 30; i >= 0; i--) {
    var date = new Date();
    date.setDate(date.getDate() - i);
    labels.push(`${date.getMonth() + 1}/${date.getDate()}`);

    var rand = 1 - i / 30;

    fitnessRand = Math.round(
      rand * 4 + randInt(Math.round(-(2 * rand)), Math.floor(3 * rand))
    );
    if (fitnessRand < 0) {
      fitnessRand = 0;
    }
    fitnessData.push(fitnessRand);

    nutritionRandHealthy = 2000 * rand + randInt(-500, 500);
    if (nutritionRandHealthy < 0) {
      nutritionRandHealthy = 0;
    }
    nutritionDataHealthy.push(nutritionRandHealthy);
    nutritionRandUnhealthy = 2200 * (1 - rand) + randInt(-500, 500);
    if (nutritionRandUnhealthy < 0) {
      nutritionRandUnhealthy = 0;
    }
    nutritionDataUnhealthy.push(nutritionRandUnhealthy);

    if (fitnessRand < 1) {
      bgColorsFitness.push("rgba(255,0,0,0.2)");
      borderColorsFitness.push("rgba(255,0,0,1)");
    } else if (fitnessRand < 2) {
      bgColorsFitness.push("rgba(255,255,0,0.2)");
      borderColorsFitness.push("rgba(255,255,0,1)");
    } else {
      bgColorsFitness.push("rgba(0,255,0,0.2)");
      borderColorsFitness.push("rgba(0,255,0,1)");
    }

    var moodIndex =
      (fitnessRand +
        nutritionRandHealthy / 2000 -
        nutritionRandUnhealthy / 2000) /
      3;
    if (moodIndex < 0) {
      mood -= 1;
      moodData.push(mood);
      bgColorsMood.push("rgba(255,0,0,0.2)");
      borderColorsMood.push("rgba(255,0,0,1)");
    } else if (moodIndex < 0.5) {
      moodData.push(mood);
      bgColorsMood.push("rgba(255,255,0,0.2)");
      borderColorsMood.push("rgba(255,255,0,1)");
    } else {
      mood += 1;
      moodData.push(mood);
      bgColorsMood.push("rgba(0,255,0,0.2)");
      borderColorsMood.push("rgba(0,255,0,1)");
    }
  }

  var moodChart = new Chart(moodChartElement, {
    type: "line",
    data: {
      labels: labels,
      datasets: [
        {
          label: "Mood Level on Date",
          data: moodData,
          borderColor: "rgba(0,0,0,0.2)",
          borderWidth: 1,
          pointBackgroundColor: bgColorsMood,
          pointBorderColor: borderColorsMood,
          pointRadius: 5,
          fill: false
        }
      ]
    },
    options: {
      scales: {
        yAxes: [
          {
            ticks: {
              stepSize: 1
            }
          }
        ]
      }
    }
  });

  var fitnessChart = new Chart(fitnessChartElement, {
    type: "bar",
    data: {
      labels: labels,
      datasets: [
        {
          label: "Hours of Activity",
          data: fitnessData,
          backgroundColor: bgColorsFitness,
          borderColor: borderColorsFitness,
          borderWidth: 1
        }
      ]
    },
    options: {
      scales: {
        yAxes: [
          {
            ticks: {
              beginAtZero: true,
              stepSize: 1
            }
          }
        ]
      }
    }
  });

  var nutritionChart = new Chart(nutritionChartElement, {
    type: "bar",
    data: {
      labels: labels,
      datasets: [
        {
          label: "Healthy Calories",
          data: nutritionDataHealthy,
          backgroundColor: "rgba(0,255,0,0.2)",
          borderColor: "rgba(0,255,0,1)",
          borderWidth: 1
        },
        {
          label: "Unhealthy Calories",
          data: nutritionDataUnhealthy,
          backgroundColor: "rgba(255,0,0,0.4)",
          borderColor: "rgba(255,0,0,1)",
          borderWidth: 1
        }
      ]
    },
    options: {
      scales: {
        yAxes: [
          {
            ticks: {
              beginAtZero: true
            },
            stacked: true
          }
        ],
        xAxes: [
          {
            stacked: true
          }
        ]
      }
    }
  });
</script>
